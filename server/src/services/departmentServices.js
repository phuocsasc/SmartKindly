import { DepartmentModel } from '~/models/departmentModel';
import { AcademicYearModel } from '~/models/academicYearModel';
import { UserModel } from '~/models/userModel';
import ApiError from '~/utils/ApiError';
import { StatusCodes } from 'http-status-codes';

const createNew = async (data, userId) => {
    try {
        console.log('üì• [Department createNew] Starting with data:', data);
        console.log('üì• [Department createNew] User ID:', userId);

        // ‚úÖ L·∫•y schoolId t·ª´ user
        const user = await UserModel.findById(userId).select('schoolId');
        if (!user || !user.schoolId) {
            throw new ApiError(StatusCodes.FORBIDDEN, 'B·∫°n kh√¥ng thu·ªôc tr∆∞·ªùng h·ªçc n√†o');
        }

        const schoolId = user.schoolId;
        console.log('üè´ [Department createNew] School ID:', schoolId);

        // ‚úÖ Ki·ªÉm tra nƒÉm h·ªçc c√≥ t·ªìn t·∫°i v√† thu·ªôc tr∆∞·ªùng n√†y kh√¥ng
        const academicYear = await AcademicYearModel.findOne({
            _id: data.academicYearId,
            schoolId,
            _destroy: false,
        });

        if (!academicYear) {
            throw new ApiError(StatusCodes.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y nƒÉm h·ªçc');
        }

        console.log('üìÖ [Department createNew] Academic year:', {
            id: academicYear._id,
            name: `${academicYear.fromYear}-${academicYear.toYear}`,
            status: academicYear.status,
        });

        // ‚úÖ Ch·ªâ cho ph√©p t·∫°o t·ªï b·ªô m√¥n trong nƒÉm h·ªçc ƒëang "active"
        if (academicYear.status !== 'active') {
            throw new ApiError(StatusCodes.FORBIDDEN, 'Ch·ªâ c√≥ th·ªÉ t·∫°o t·ªï b·ªô m√¥n cho nƒÉm h·ªçc ƒëang ho·∫°t ƒë·ªông');
        }

        // ‚úÖ Ki·ªÉm tra t·ªï b·ªô m√¥n ƒë√£ t·ªìn t·∫°i trong nƒÉm h·ªçc n√†y ch∆∞a
        const existingDepartment = await DepartmentModel.findOne({
            schoolId,
            academicYearId: data.academicYearId,
            name: data.name,
            _destroy: false,
        });

        if (existingDepartment) {
            throw new ApiError(StatusCodes.CONFLICT, `T·ªï b·ªô m√¥n "${data.name}" ƒë√£ t·ªìn t·∫°i trong nƒÉm h·ªçc n√†y`);
        }

        // ‚úÖ L·∫•y danh s√°ch role ƒë∆∞·ª£c ph√©p cho t·ªï b·ªô m√¥n n√†y
        const allowedRoles = DepartmentModel.getAllowedRolesByDepartmentName(data.name);
        console.log('üë• [Department createNew] Allowed roles:', allowedRoles);

        // ‚úÖ Ki·ªÉm tra t·∫•t c·∫£ managers c√≥ h·ª£p l·ªá kh√¥ng
        const managers = await UserModel.find({
            _id: { $in: data.managers },
            schoolId,
            _destroy: false,
            status: true, // Ch·ªâ ch·ªçn user ƒëang k√≠ch ho·∫°t
        });

        console.log('üë• [Department createNew] Found managers:', managers.length);

        if (managers.length !== data.managers.length) {
            throw new ApiError(
                StatusCodes.BAD_REQUEST,
                'M·ªôt s·ªë c√°n b·ªô qu·∫£n l√Ω kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng thu·ªôc tr∆∞·ªùng n√†y',
            );
        }

        // ‚úÖ Ki·ªÉm tra role c·ªßa t·ª´ng manager
        const invalidManagers = managers.filter((manager) => !allowedRoles.includes(manager.role));

        if (invalidManagers.length > 0) {
            const invalidNames = invalidManagers.map((m) => m.fullName).join(', ');
            throw new ApiError(
                StatusCodes.BAD_REQUEST,
                `C√°n b·ªô "${invalidNames}" kh√¥ng ph√π h·ª£p v·ªõi vai tr√≤ c·ªßa t·ªï b·ªô m√¥n "${data.name}". Ch·ªâ ch·∫•p nh·∫≠n vai tr√≤: ${allowedRoles.join(', ')}`,
            );
        }

        // ‚úÖ LOGIC M·ªöI: Ki·ªÉm tra c√°n b·ªô ƒë√£ thu·ªôc t·ªï b·ªô m√¥n kh√°c trong nƒÉm h·ªçc n√†y ch∆∞a
        const existingDepartments = await DepartmentModel.find({
            schoolId,
            academicYearId: data.academicYearId,
            _destroy: false,
            managers: { $in: data.managers }, // T√¨m c√°c department c√≥ ch·ª©a b·∫•t k·ª≥ manager n√†o trong danh s√°ch
        }).populate('managers', 'fullName');

        if (existingDepartments.length > 0) {
            // L·∫•y danh s√°ch c√°n b·ªô b·ªã tr√πng
            const duplicateManagers = [];

            existingDepartments.forEach((dept) => {
                dept.managers.forEach((manager) => {
                    if (data.managers.includes(manager._id.toString())) {
                        duplicateManagers.push({
                            name: manager.fullName,
                            departmentName: dept.name,
                        });
                    }
                });
            });

            // T·∫°o th√¥ng b√°o l·ªói chi ti·∫øt
            const errorMessages = duplicateManagers.map(
                (dm) => `"${dm.name}" ƒë√£ thu·ªôc t·ªï b·ªô m√¥n "${dm.departmentName}"`,
            );

            throw new ApiError(
                StatusCodes.CONFLICT,
                `Kh√¥ng th·ªÉ th√™m c√°n b·ªô v√¨: ${errorMessages.join(', ')}. M·ªói c√°n b·ªô ch·ªâ ƒë∆∞·ª£c thu·ªôc 1 t·ªï b·ªô m√¥n trong nƒÉm h·ªçc.`,
            );
        }

        // ‚úÖ T·∫°o departmentId t·ª± ƒë·ªông
        const departmentId = await DepartmentModel.generateDepartmentId();

        // ‚úÖ T·∫°o t·ªï b·ªô m√¥n m·ªõi
        const newDepartment = new DepartmentModel({
            departmentId,
            schoolId,
            academicYearId: data.academicYearId,
            name: data.name,
            managers: data.managers,
            note: data.note || '',
            createdBy: userId,
        });

        const savedDepartment = await newDepartment.save();
        console.log('‚úÖ [Department createNew] Department created successfully');

        // ‚úÖ ƒê√°nh d·∫•u nƒÉm h·ªçc ƒë√£ c·∫•u h√¨nh
        if (!academicYear.isConfig) {
            academicYear.isConfig = true;
            await academicYear.save();
            console.log('‚úÖ [Department createNew] Academic year marked as configured');
        }

        // ‚úÖ Populate data ƒë·ªÉ tr·∫£ v·ªÅ
        const populatedDepartment = await DepartmentModel.findById(savedDepartment._id)
            .populate('academicYearId', 'fromYear toYear status')
            .populate('managers', 'fullName username role email phone')
            .populate('createdBy', 'fullName username');

        return populatedDepartment;
    } catch (error) {
        console.error('‚ùå [Department createNew] Error:', error);
        if (error instanceof ApiError) throw error;
        throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'L·ªói khi t·∫°o t·ªï b·ªô m√¥n: ' + error.message);
    }
};

const getAll = async (query, userId) => {
    try {
        const user = await UserModel.findById(userId).select('schoolId').lean();
        if (!user || !user.schoolId) {
            throw new ApiError(StatusCodes.FORBIDDEN, 'B·∫°n kh√¥ng thu·ªôc tr∆∞·ªùng h·ªçc n√†o');
        }

        const { page = 1, limit = 10, academicYearId = '', name = '' } = query;
        const skip = (page - 1) * limit;

        const filter = { _destroy: false, schoolId: user.schoolId };
        if (academicYearId) filter.academicYearId = academicYearId;
        if (name) filter.name = name;

        // ‚úÖ Parallel query
        const [departments, total] = await Promise.all([
            DepartmentModel.find(filter)
                .select('departmentId name note managers academicYearId createdBy createdAt') // ‚úÖ Select only needed
                .populate('academicYearId', 'fromYear toYear status')
                .populate('managers', 'fullName username role email phone')
                .populate('createdBy', 'fullName username')
                .skip(skip)
                .limit(parseInt(limit))
                .sort({ createdAt: -1 })
                .lean(),

            DepartmentModel.countDocuments(filter),
        ]);

        return {
            departments,
            pagination: {
                currentPage: parseInt(page),
                totalPages: Math.ceil(total / limit),
                totalItems: total,
                itemsPerPage: parseInt(limit),
            },
        };
    } catch (error) {
        if (error instanceof ApiError) throw error;
        throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'L·ªói khi l·∫•y danh s√°ch t·ªï b·ªô m√¥n');
    }
};

const getDetails = async (id, userId) => {
    try {
        const user = await UserModel.findById(userId).select('schoolId');
        if (!user || !user.schoolId) {
            throw new ApiError(StatusCodes.FORBIDDEN, 'B·∫°n kh√¥ng thu·ªôc tr∆∞·ªùng h·ªçc n√†o');
        }

        const department = await DepartmentModel.findOne({
            _id: id,
            schoolId: user.schoolId,
            _destroy: false,
        })
            .populate('academicYearId', 'fromYear toYear status')
            .populate('managers', 'fullName username role email phone')
            .populate('createdBy', 'fullName username');

        if (!department) {
            throw new ApiError(StatusCodes.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y t·ªï b·ªô m√¥n');
        }

        return department;
    } catch (error) {
        if (error instanceof ApiError) throw error;
        throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'L·ªói khi l·∫•y th√¥ng tin t·ªï b·ªô m√¥n');
    }
};

const update = async (id, data, userId) => {
    try {
        console.log('üìù [Department update] Starting with id:', id);
        console.log('üìù [Department update] Data:', data);

        const user = await UserModel.findById(userId).select('schoolId');
        if (!user || !user.schoolId) {
            throw new ApiError(StatusCodes.FORBIDDEN, 'B·∫°n kh√¥ng thu·ªôc tr∆∞·ªùng h·ªçc n√†o');
        }

        const department = await DepartmentModel.findOne({
            _id: id,
            schoolId: user.schoolId,
            _destroy: false,
        }).populate('academicYearId');

        if (!department) {
            throw new ApiError(StatusCodes.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y t·ªï b·ªô m√¥n');
        }

        console.log('üîç [Department update] Found department:', {
            name: department.name,
            academicYear: `${department.academicYearId.fromYear}-${department.academicYearId.toYear}`,
            status: department.academicYearId.status,
        });

        // ‚úÖ Ch·ªâ cho ph√©p c·∫≠p nh·∫≠t t·ªï b·ªô m√¥n trong nƒÉm h·ªçc ƒëang "active"
        if (department.academicYearId.status !== 'active') {
            throw new ApiError(StatusCodes.FORBIDDEN, 'Ch·ªâ c√≥ th·ªÉ c·∫≠p nh·∫≠t t·ªï b·ªô m√¥n trong nƒÉm h·ªçc ƒëang ho·∫°t ƒë·ªông');
        }

        // ‚úÖ N·∫øu thay ƒë·ªïi t√™n t·ªï b·ªô m√¥n, ki·ªÉm tra tr√πng l·∫∑p
        if (data.name && data.name !== department.name) {
            const existingDepartment = await DepartmentModel.findOne({
                schoolId: user.schoolId,
                academicYearId: department.academicYearId._id,
                name: data.name,
                _id: { $ne: id },
                _destroy: false,
            });

            if (existingDepartment) {
                throw new ApiError(StatusCodes.CONFLICT, `T·ªï b·ªô m√¥n "${data.name}" ƒë√£ t·ªìn t·∫°i trong nƒÉm h·ªçc n√†y`);
            }
        }

        // ‚úÖ N·∫øu c·∫≠p nh·∫≠t managers, ki·ªÉm tra role ph√π h·ª£p
        if (data.managers) {
            const departmentName = data.name || department.name;
            const allowedRoles = DepartmentModel.getAllowedRolesByDepartmentName(departmentName);

            const managers = await UserModel.find({
                _id: { $in: data.managers },
                schoolId: user.schoolId,
                _destroy: false,
                status: true,
            });

            if (managers.length !== data.managers.length) {
                throw new ApiError(
                    StatusCodes.BAD_REQUEST,
                    'M·ªôt s·ªë c√°n b·ªô qu·∫£n l√Ω kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng thu·ªôc tr∆∞·ªùng n√†y',
                );
            }

            const invalidManagers = managers.filter((manager) => !allowedRoles.includes(manager.role));

            if (invalidManagers.length > 0) {
                const invalidNames = invalidManagers.map((m) => m.fullName).join(', ');
                throw new ApiError(
                    StatusCodes.BAD_REQUEST,
                    `C√°n b·ªô "${invalidNames}" kh√¥ng ph√π h·ª£p v·ªõi vai tr√≤ c·ªßa t·ªï b·ªô m√¥n "${departmentName}". Ch·ªâ ch·∫•p nh·∫≠n vai tr√≤: ${allowedRoles.join(', ')}`,
                );
            }

            // ‚úÖ LOGIC M·ªöI: Ch·ªâ ki·ªÉm tra c√°n b·ªô M·ªöI TH√äM V√ÄO (kh√¥ng n·∫±m trong danh s√°ch c≈©)
            const oldManagerIds = department.managers.map((m) => m.toString());
            const newManagerIds = data.managers.filter((managerId) => !oldManagerIds.includes(managerId));

            console.log('üîç [Department update] Manager comparison:', {
                oldManagers: oldManagerIds,
                newManagers: data.managers,
                addedManagers: newManagerIds,
            });

            // ‚úÖ Ch·ªâ ki·ªÉm tra duplicate cho c√°c c√°n b·ªô M·ªöI th√™m v√†o
            if (newManagerIds.length > 0) {
                const existingDepartments = await DepartmentModel.find({
                    schoolId: user.schoolId,
                    academicYearId: department.academicYearId._id,
                    _id: { $ne: id }, // ‚úÖ Lo·∫°i tr·ª´ t·ªï b·ªô m√¥n ƒëang update
                    _destroy: false,
                    managers: { $in: newManagerIds }, // ‚úÖ Ch·ªâ ki·ªÉm tra c√°c c√°n b·ªô M·ªöI
                }).populate('managers', 'fullName');

                if (existingDepartments.length > 0) {
                    const duplicateManagers = [];

                    existingDepartments.forEach((dept) => {
                        dept.managers.forEach((manager) => {
                            if (newManagerIds.includes(manager._id.toString())) {
                                duplicateManagers.push({
                                    name: manager.fullName,
                                    departmentName: dept.name,
                                });
                            }
                        });
                    });

                    if (duplicateManagers.length > 0) {
                        const errorMessages = duplicateManagers.map(
                            (dm) => `"${dm.name}" ƒë√£ thu·ªôc t·ªï b·ªô m√¥n "${dm.departmentName}"`,
                        );

                        throw new ApiError(
                            StatusCodes.CONFLICT,
                            `Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t v√¨: ${errorMessages.join(', ')}. M·ªói c√°n b·ªô ch·ªâ ƒë∆∞·ª£c thu·ªôc 1 t·ªï b·ªô m√¥n trong nƒÉm h·ªçc.`,
                        );
                    }
                }
            }
        }

        // ‚úÖ C·∫≠p nh·∫≠t
        const updatedDepartment = await DepartmentModel.findByIdAndUpdate(id, data, {
            new: true,
            runValidators: true,
        })
            .populate('academicYearId', 'fromYear toYear status')
            .populate('managers', 'fullName username role email phone')
            .populate('createdBy', 'fullName username');

        console.log('‚úÖ [Department update] Updated successfully');

        return updatedDepartment;
    } catch (error) {
        console.error('‚ùå [Department update] Error:', error);
        if (error instanceof ApiError) throw error;
        throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'L·ªói khi c·∫≠p nh·∫≠t t·ªï b·ªô m√¥n: ' + error.message);
    }
};

const deleteDepartment = async (id, userId) => {
    try {
        const user = await UserModel.findById(userId).select('schoolId');
        if (!user || !user.schoolId) {
            throw new ApiError(StatusCodes.FORBIDDEN, 'B·∫°n kh√¥ng thu·ªôc tr∆∞·ªùng h·ªçc n√†o');
        }

        const department = await DepartmentModel.findOne({
            _id: id,
            schoolId: user.schoolId,
            _destroy: false,
        }).populate('academicYearId');

        if (!department) {
            throw new ApiError(StatusCodes.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y t·ªï b·ªô m√¥n');
        }

        // ‚úÖ Ch·ªâ cho ph√©p x√≥a t·ªï b·ªô m√¥n trong nƒÉm h·ªçc ƒëang "active"
        if (department.academicYearId.status !== 'active') {
            throw new ApiError(StatusCodes.FORBIDDEN, 'Ch·ªâ c√≥ th·ªÉ x√≥a t·ªï b·ªô m√¥n trong nƒÉm h·ªçc ƒëang ho·∫°t ƒë·ªông');
        }

        // Soft delete
        await DepartmentModel.findByIdAndUpdate(id, { _destroy: true });

        return { message: 'X√≥a t·ªï b·ªô m√¥n th√†nh c√¥ng' };
    } catch (error) {
        if (error instanceof ApiError) throw error;
        throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'L·ªói khi x√≥a t·ªï b·ªô m√¥n');
    }
};

// ‚úÖ API l·∫•y danh s√°ch c√°n b·ªô theo t√™n t·ªï b·ªô m√¥n
const getAvailableManagers = async (departmentName, academicYearId, userId, currentDepartmentId = null) => {
    try {
        const user = await UserModel.findById(userId).select('schoolId');
        if (!user || !user.schoolId) {
            throw new ApiError(StatusCodes.FORBIDDEN, 'B·∫°n kh√¥ng thu·ªôc tr∆∞·ªùng h·ªçc n√†o');
        }

        // ‚úÖ L·∫•y danh s√°ch role ƒë∆∞·ª£c ph√©p
        const allowedRoles = DepartmentModel.getAllowedRolesByDepartmentName(departmentName);

        if (allowedRoles.length === 0) {
            throw new ApiError(StatusCodes.BAD_REQUEST, 'T√™n t·ªï b·ªô m√¥n kh√¥ng h·ª£p l·ªá');
        }

        // ‚úÖ L·∫•y danh s√°ch user ph√π h·ª£p
        const allManagers = await UserModel.find({
            schoolId: user.schoolId,
            role: { $in: allowedRoles },
            status: true, // Ch·ªâ l·∫•y user ƒëang k√≠ch ho·∫°t
            _destroy: false,
        }).select('fullName username role email phone');

        // ‚úÖ LOGIC M·ªöI: L·∫•y danh s√°ch c√°n b·ªô ƒë√£ ƒë∆∞·ª£c ch·ªçn trong c√°c t·ªï b·ªô m√¥n KH√ÅC (kh√¥ng bao g·ªìm t·ªï b·ªô m√¥n hi·ªán t·∫°i)
        const filter = {
            schoolId: user.schoolId,
            academicYearId,
            _destroy: false,
        };

        // ‚úÖ N·∫øu ƒëang update (c√≥ currentDepartmentId), lo·∫°i tr·ª´ t·ªï b·ªô m√¥n hi·ªán t·∫°i
        if (currentDepartmentId) {
            filter._id = { $ne: currentDepartmentId };
        }

        const assignedDepartments = await DepartmentModel.find(filter).select('managers');

        // T·∫°o Set c√°c manager ID ƒë√£ ƒë∆∞·ª£c assign cho t·ªï b·ªô m√¥n KH√ÅC
        const assignedManagerIds = new Set();
        assignedDepartments.forEach((dept) => {
            dept.managers.forEach((managerId) => {
                assignedManagerIds.add(managerId.toString());
            });
        });

        // ‚úÖ L·ªçc ra c√°c manager ch∆∞a ƒë∆∞·ª£c assign HO·∫∂C ƒëang thu·ªôc t·ªï b·ªô m√¥n hi·ªán t·∫°i
        const availableManagers = allManagers.filter((manager) => !assignedManagerIds.has(manager._id.toString()));

        console.log(
            `üìä [getAvailableManagers] Total: ${allManagers.length}, Assigned to others: ${assignedManagerIds.size}, Available: ${availableManagers.length}`,
        );

        return availableManagers;
    } catch (error) {
        if (error instanceof ApiError) throw error;
        throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'L·ªói khi l·∫•y danh s√°ch c√°n b·ªô');
    }
};
const copyFromYear = async (data, userId) => {
    try {
        console.log('üìã [Department copyFromYear] Starting with data:', data);
        const { fromAcademicYearId, toAcademicYearId } = data;

        // ‚úÖ L·∫•y schoolId t·ª´ user
        const user = await UserModel.findById(userId).select('schoolId');
        if (!user || !user.schoolId) {
            throw new ApiError(StatusCodes.FORBIDDEN, 'B·∫°n kh√¥ng thu·ªôc tr∆∞·ªùng h·ªçc n√†o');
        }

        const schoolId = user.schoolId;

        // ‚úÖ Ki·ªÉm tra nƒÉm h·ªçc ngu·ªìn (t·ª´ nƒÉm c≈©)
        const fromAcademicYear = await AcademicYearModel.findOne({
            _id: fromAcademicYearId,
            schoolId,
            _destroy: false,
        });

        if (!fromAcademicYear) {
            throw new ApiError(StatusCodes.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y nƒÉm h·ªçc ngu·ªìn');
        }

        // ‚úÖ Ki·ªÉm tra nƒÉm h·ªçc ƒë√≠ch (nƒÉm hi·ªán t·∫°i)
        const toAcademicYear = await AcademicYearModel.findOne({
            _id: toAcademicYearId,
            schoolId,
            status: 'active',
            _destroy: false,
        });

        if (!toAcademicYear) {
            throw new ApiError(StatusCodes.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y nƒÉm h·ªçc ƒë√≠ch ho·∫∑c nƒÉm h·ªçc kh√¥ng ƒëang ho·∫°t ƒë·ªông');
        }

        // ‚úÖ Ki·ªÉm tra nƒÉm h·ªçc ƒë√≠ch ƒë√£ c√≥ d·ªØ li·ªáu ch∆∞a
        const existingDepartments = await DepartmentModel.find({
            schoolId,
            academicYearId: toAcademicYearId,
            _destroy: false,
        });

        if (existingDepartments.length > 0) {
            throw new ApiError(
                StatusCodes.CONFLICT,
                `NƒÉm h·ªçc ${toAcademicYear.fromYear}-${toAcademicYear.toYear} ƒë√£ c√≥ ${existingDepartments.length} t·ªï b·ªô m√¥n. Vui l√≤ng x√≥a h·∫øt tr∆∞·ªõc khi copy.`,
            );
        }

        // ‚úÖ L·∫•y danh s√°ch t·ªï b·ªô m√¥n t·ª´ nƒÉm c≈©
        const sourceDepartments = await DepartmentModel.find({
            schoolId,
            academicYearId: fromAcademicYearId,
            _destroy: false,
        }).populate('managers', '_id');

        if (sourceDepartments.length === 0) {
            throw new ApiError(StatusCodes.NOT_FOUND, 'NƒÉm h·ªçc ngu·ªìn kh√¥ng c√≥ t·ªï b·ªô m√¥n n√†o');
        }

        console.log(`üìã [Department copyFromYear] Found ${sourceDepartments.length} departments to copy`);

        // ‚úÖ Copy t·ª´ng t·ªï b·ªô m√¥n
        const copiedDepartments = [];
        for (const sourceDept of sourceDepartments) {
            const departmentId = await DepartmentModel.generateDepartmentId();

            const newDepartment = new DepartmentModel({
                departmentId,
                schoolId,
                academicYearId: toAcademicYearId,
                name: sourceDept.name,
                managers: sourceDept.managers.map((m) => m._id), // Copy manager IDs
                note: sourceDept.note || '',
                createdBy: userId,
            });

            const savedDept = await newDepartment.save();
            copiedDepartments.push(savedDept);
        }

        // ‚úÖ ƒê√°nh d·∫•u nƒÉm h·ªçc ƒë√≠ch ƒë√£ c·∫•u h√¨nh
        if (!toAcademicYear.isConfig) {
            toAcademicYear.isConfig = true;
            await toAcademicYear.save();
            console.log('‚úÖ [Department copyFromYear] Academic year marked as configured');
        }

        console.log(`‚úÖ [Department copyFromYear] Copied ${copiedDepartments.length} departments successfully`);

        // ‚úÖ Populate data ƒë·ªÉ tr·∫£ v·ªÅ
        const populatedDepartments = await DepartmentModel.find({
            _id: { $in: copiedDepartments.map((d) => d._id) },
        })
            .populate('academicYearId', 'fromYear toYear status')
            .populate('managers', 'fullName username role email phone')
            .populate('createdBy', 'fullName username');

        return {
            count: populatedDepartments.length,
            departments: populatedDepartments,
        };
    } catch (error) {
        console.error('‚ùå [Department copyFromYear] Error:', error);
        if (error instanceof ApiError) throw error;
        throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'L·ªói khi copy t·ªï b·ªô m√¥n: ' + error.message);
    }
};

export const departmentServices = {
    createNew,
    getAll,
    getDetails,
    update,
    deleteDepartment,
    getAvailableManagers,
    copyFromYear,
};
