// server/src/services/personnelEvaluationServices.js

import { PersonnelEvaluationModel } from '~/models/personnelEvaluationModel';
import { PersonnelRecordModel } from '~/models/personnelRecordModel';
import { AcademicYearModel } from '~/models/academicYearModel';
import { UserModel } from '~/models/userModel';
import ApiError from '~/utils/ApiError';
import { StatusCodes } from 'http-status-codes';

/**
 * ‚úÖ L·∫•y t·∫•t c·∫£ ƒë√°nh gi√° theo nƒÉm h·ªçc (t·ª± ƒë·ªông sync v·ªõi PersonnelRecord)
 */
const getAll = async (query, userId) => {
    try {
        const user = await UserModel.findById(userId).select('schoolId').lean();
        if (!user || !user.schoolId) {
            throw new ApiError(StatusCodes.FORBIDDEN, 'B·∫°n kh√¥ng thu·ªôc tr∆∞·ªùng h·ªçc n√†o');
        }

        const { page = 1, limit = 10, search = '', academicYearId = '' } = query;
        const skip = (page - 1) * limit;

        // ‚úÖ L·∫•y nƒÉm h·ªçc ƒëang active n·∫øu kh√¥ng truy·ªÅn academicYearId
        let targetYearId = academicYearId;
        if (!targetYearId) {
            const activeYear = await AcademicYearModel.findOne({
                schoolId: user.schoolId,
                status: 'active',
                _destroy: false,
            });

            if (!activeYear) {
                throw new ApiError(StatusCodes.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y nƒÉm h·ªçc ƒëang ho·∫°t ƒë·ªông');
            }
            targetYearId = activeYear._id.toString();
        }

        // ‚úÖ L·∫•y PersonnelRecord ƒë·ªß ƒëi·ªÅu ki·ªán
        const personnelRecords = await PersonnelRecordModel.find({
            schoolId: user.schoolId,
            _destroy: false,
            positionGroup: { $in: ['T·ªï tr∆∞·ªüng', 'T·ªï ph√≥', 'Gi√°o vi√™n'] },
            workStatus: 'ƒêang l√†m vi·ªác',
        })
            .select('_id personnelCode fullName')
            .lean();

        console.log(
            `üìä [PersonnelEvaluation getAll] Found ${personnelRecords.length} eligible personnel for year ${targetYearId}`,
        );

        // ‚úÖ Sync: T·∫°o evaluation cho nƒÉm h·ªçc hi·ªán t·∫°i n·∫øu ch∆∞a c√≥
        for (const record of personnelRecords) {
            try {
                const existingEval = await PersonnelEvaluationModel.findOne({
                    personnelRecordId: record._id,
                    academicYearId: targetYearId,
                    _destroy: false,
                });

                if (!existingEval) {
                    await PersonnelEvaluationModel.create({
                        personnelRecordId: record._id,
                        academicYearId: targetYearId,
                        schoolId: user.schoolId,
                        fullName: record.fullName,
                        personnelCode: record.personnelCode,
                        officialEvaluation: '',
                        regularTraining: '',
                        excellentTeacher: '',
                        emulationTitle: '',
                        notes: '',
                    });
                    console.log(`‚úÖ [PersonnelEvaluation] Created for ${record.fullName} in year ${targetYearId}`);
                }
            } catch (error) {
                if (error.code !== 11000) {
                    console.error(
                        `‚ùå [PersonnelEvaluation] Error creating evaluation for ${record.fullName}:`,
                        error.message,
                    );
                }
            }
        }

        // ‚úÖ Build filter
        const evalFilter = {
            schoolId: user.schoolId,
            academicYearId: targetYearId,
            _destroy: false,
        };

        if (search) {
            evalFilter.$or = [
                { fullName: { $regex: search, $options: 'i' } },
                { personnelCode: { $regex: search, $options: 'i' } },
            ];
        }

        // ‚úÖ Query
        const [records, totalItems] = await Promise.all([
            PersonnelEvaluationModel.find(evalFilter)
                .populate('personnelRecordId', 'fullName personnelCode department positionGroup workStatus')
                .populate('academicYearId', 'fromYear toYear status')
                .populate('lastUpdatedBy', 'fullName username')
                .sort({ createdAt: -1 })
                .skip(skip)
                .limit(Number(limit))
                .lean(),
            PersonnelEvaluationModel.countDocuments(evalFilter),
        ]);

        console.log(`‚úÖ [PersonnelEvaluation getAll] Returning ${records.length} records (total: ${totalItems})`);

        return {
            records,
            pagination: {
                page: Number(page),
                limit: Number(limit),
                totalItems,
                totalPages: Math.ceil(totalItems / limit),
            },
        };
    } catch (error) {
        console.error('‚ùå [PersonnelEvaluation getAll] Error:', error);
        if (error instanceof ApiError) throw error;
        throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'L·ªói khi l·∫•y danh s√°ch ƒë√°nh gi√°');
    }
};

/**
 * ‚úÖ L·∫•y chi ti·∫øt ƒë√°nh gi√°
 */
const getDetails = async (id, userId) => {
    try {
        const user = await UserModel.findById(userId).select('schoolId').lean();
        if (!user || !user.schoolId) {
            throw new ApiError(StatusCodes.FORBIDDEN, 'B·∫°n kh√¥ng thu·ªôc tr∆∞·ªùng h·ªçc n√†o');
        }

        const evaluation = await PersonnelEvaluationModel.findOne({
            _id: id,
            schoolId: user.schoolId,
            _destroy: false,
        })
            .populate('personnelRecordId')
            .populate('academicYearId')
            .populate('lastUpdatedBy', 'fullName username')
            .lean();

        if (!evaluation) {
            throw new ApiError(StatusCodes.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y ƒë√°nh gi√°');
        }

        return evaluation;
    } catch (error) {
        if (error instanceof ApiError) throw error;
        throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'L·ªói khi l·∫•y th√¥ng tin ƒë√°nh gi√°');
    }
};

/**
 * ‚úÖ C·∫≠p nh·∫≠t ƒë√°nh gi√° (CH·ªà cho nƒÉm h·ªçc ƒëang active)
 */
const update = async (id, data, userId) => {
    try {
        console.log('üìù [PersonnelEvaluation update] Starting with id:', id);

        const user = await UserModel.findById(userId).select('schoolId').lean();
        if (!user || !user.schoolId) {
            throw new ApiError(StatusCodes.FORBIDDEN, 'B·∫°n kh√¥ng thu·ªôc tr∆∞·ªùng h·ªçc n√†o');
        }

        const evaluation = await PersonnelEvaluationModel.findOne({
            _id: id,
            schoolId: user.schoolId,
            _destroy: false,
        }).populate('academicYearId');

        if (!evaluation) {
            throw new ApiError(StatusCodes.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y ƒë√°nh gi√°');
        }

        // ‚úÖ Ki·ªÉm tra nƒÉm h·ªçc c√≥ ƒëang active kh√¥ng
        if (evaluation.academicYearId.status !== 'active') {
            throw new ApiError(
                StatusCodes.FORBIDDEN,
                `Kh√¥ng th·ªÉ ch·ªânh s·ª≠a ƒë√°nh gi√° c·ªßa nƒÉm h·ªçc ${evaluation.academicYearId.fromYear}-${evaluation.academicYearId.toYear}. Ch·ªâ c√≥ th·ªÉ ƒë√°nh gi√° trong nƒÉm h·ªçc ƒëang ho·∫°t ƒë·ªông!`,
            );
        }

        // ‚úÖ CH·ªà cho ph√©p update c√°c fields ƒë√°nh gi√°
        const allowedFields = ['officialEvaluation', 'regularTraining', 'excellentTeacher', 'emulationTitle', 'notes'];
        const updateData = {};

        allowedFields.forEach((field) => {
            if (data[field] !== undefined) {
                updateData[field] = data[field];
            }
        });

        updateData.lastUpdatedBy = userId;

        console.log('üîç [PersonnelEvaluation update] Data to update:', updateData);

        // ‚úÖ Update
        const updatedEvaluation = await PersonnelEvaluationModel.findByIdAndUpdate(id, updateData, {
            new: true,
            runValidators: true,
        })
            .populate('personnelRecordId')
            .populate('academicYearId')
            .populate('lastUpdatedBy', 'fullName username')
            .lean();

        console.log('‚úÖ [PersonnelEvaluation update] Updated successfully');

        return updatedEvaluation;
    } catch (error) {
        console.error('‚ùå [PersonnelEvaluation update] Error:', error);
        if (error instanceof ApiError) throw error;
        throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'L·ªói khi c·∫≠p nh·∫≠t ƒë√°nh gi√°: ' + error.message);
    }
};

/**
 * ‚úÖ X√≥a ƒë√°nh gi√° (CH·ªà cho nƒÉm h·ªçc ƒëang active)
 */
const deleteEvaluation = async (id, userId) => {
    try {
        const user = await UserModel.findById(userId).select('schoolId').lean();
        if (!user || !user.schoolId) {
            throw new ApiError(StatusCodes.FORBIDDEN, 'B·∫°n kh√¥ng thu·ªôc tr∆∞·ªùng h·ªçc n√†o');
        }

        const evaluation = await PersonnelEvaluationModel.findOne({
            _id: id,
            schoolId: user.schoolId,
            _destroy: false,
        }).populate('academicYearId');

        if (!evaluation) {
            throw new ApiError(StatusCodes.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y ƒë√°nh gi√°');
        }

        // ‚úÖ Ki·ªÉm tra nƒÉm h·ªçc c√≥ ƒëang active kh√¥ng
        if (evaluation.academicYearId.status !== 'active') {
            throw new ApiError(StatusCodes.FORBIDDEN, 'Ch·ªâ c√≥ th·ªÉ x√≥a ƒë√°nh gi√° trong nƒÉm h·ªçc ƒëang ho·∫°t ƒë·ªông');
        }

        // Soft delete
        await PersonnelEvaluationModel.findByIdAndUpdate(id, { _destroy: true });

        return { message: 'X√≥a ƒë√°nh gi√° th√†nh c√¥ng' };
    } catch (error) {
        if (error instanceof ApiError) throw error;
        throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'L·ªói khi x√≥a ƒë√°nh gi√°');
    }
};

export const personnelEvaluationServices = {
    getAll,
    getDetails,
    update,
    deleteEvaluation,
};
