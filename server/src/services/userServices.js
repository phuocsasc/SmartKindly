/* eslint-disable no-unreachable */
// server/src/services/userServices.js
import { UserModel } from '~/models/userModel';
import { SchoolModel } from '~/models/schoolModel';
import ApiError from '~/utils/ApiError';
import { StatusCodes } from 'http-status-codes';
import { JwtProvider } from '~/providers/JwtProvider';
import { env } from '~/config/environment';
import { OtpModel } from '~/models/otpModel';
import { ResendProvider } from '~/providers/ResendProvider';

const login = async (data) => {
    try {
        const { username, password } = data;

        // ‚úÖ B∆∞·ªõc 1: T√¨m user theo username (kh√¥ng ki·ªÉm tra status ·ªü ƒë√¢y)
        const user = await UserModel.findOne({
            username,
            _destroy: false, // Ch·ªâ ki·ªÉm tra user ch∆∞a b·ªã x√≥a
        });

        // ‚úÖ B∆∞·ªõc 2: Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
        if (!user) {
            throw new ApiError(StatusCodes.UNAUTHORIZED, 'T√™n t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c');
        }

        // ‚úÖ B∆∞·ªõc 3: Ki·ªÉm tra password TR∆Ø·ªöC KHI ki·ªÉm tra status
        const isPasswordValid = await user.comparePassword(password);
        if (!isPasswordValid) {
            throw new ApiError(StatusCodes.UNAUTHORIZED, 'T√™n t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c');
        }

        // ‚úÖ B∆∞·ªõc 4: SAU KHI x√°c th·ª±c password th√†nh c√¥ng, m·ªõi ki·ªÉm tra account c√≥ b·ªã v√¥ hi·ªáu h√≥a kh√¥ng
        if (!user.status) {
            throw new ApiError(
                StatusCodes.FORBIDDEN,
                'T√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a. Vui l√≤ng li√™n h·ªá B·ªô ph·∫≠n k·ªπ thu·∫≠t ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.',
            );
        }
        // ‚úÖ L·∫•y th√¥ng tin tr∆∞·ªùng h·ªçc n·∫øu user c√≥ schoolId
        let schoolName = null;
        if (user.schoolId) {
            const school = await SchoolModel.findOne({
                schoolId: user.schoolId,
                _destroy: false,
            }).select('name');

            schoolName = school?.name || null;
        }
        // ‚úÖ B∆∞·ªõc 5: T·∫°o JWT token
        const userInfo = {
            id: user._id,
            // userId: user.userId,
            username: user.username,
            fullName: user.fullName,
            role: user.role,
            isRoot: user.isRoot || false, // ‚úÖ Th√™m isRoot v√†o ƒë√¢y
            schoolId: user.schoolId,
            schoolName, // ‚úÖ Th√™m schoolName
            status: user.status,
        };

        const accessToken = await JwtProvider.generateToken(
            userInfo,
            env.ACCESS_TOKEN_SECRET_SIGNATURE,
            '1h', // Access token expire trong 1 gi·ªù
        );

        const refreshToken = await JwtProvider.generateToken(
            userInfo,
            env.REFRESH_TOKEN_SECRET_SIGNATURE,
            '14d', // Refresh token expire trong 14 ng√†y
        );

        return {
            ...userInfo,
            accessToken,
            refreshToken,
        };
    } catch (error) {
        if (error instanceof ApiError) throw error;
        throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'L·ªói khi ƒëƒÉng nh·∫≠p');
    }
};

const logout = async () => {
    try {
        // V·ªõi tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng localStorage, ph√≠a client s·∫Ω t·ª± x√≥a token
        // N·∫øu s·ª≠ d·ª•ng HTTP-only cookies, c·∫ßn clear cookies ·ªü ƒë√¢y
        return { message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng' };
    } catch (error) {
        throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'L·ªói khi ƒëƒÉng xu·∫•t');
    }
};

const refreshToken = async (refreshToken) => {
    try {
        // Verify refresh token
        const decoded = await JwtProvider.verifyToken(refreshToken, env.REFRESH_TOKEN_SECRET_SIGNATURE);

        // T·∫°o user info ƒë·ªÉ t·∫°o access token m·ªõi
        const userInfo = {
            id: decoded.id,
            username: decoded.username,
            fullName: decoded.fullName,
            role: decoded.role,
            isRoot: decoded.isRoot || false,
            schoolId: decoded.schoolId,
            schoolName: decoded.schoolName,
            status: decoded.status,
        };

        // T·∫°o access token m·ªõi
        const newAccessToken = await JwtProvider.generateToken(userInfo, env.ACCESS_TOKEN_SECRET_SIGNATURE, '1h');

        return {
            accessToken: newAccessToken,
        };
    } catch (error) {
        throw new ApiError(StatusCodes.UNAUTHORIZED, 'Refresh token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
    }
};
// T·∫°o m√£ OTP 6 s·ªë ng·∫´u nhi√™n
const generateOTP = () => {
    return Math.floor(100000 + Math.random() * 900000).toString();
};

const sendOtpToEmail = async (email) => {
    try {
        console.log('üîç Step 1: Finding user with email:', email);

        const user = await UserModel.findOne({ email, _destroy: false });

        if (!user) {
            console.log('‚ùå User not found');
            throw new ApiError(StatusCodes.NOT_FOUND, 'Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng');
        }

        console.log('‚úÖ Step 2: User found:', user.username);

        const existingOtp = await OtpModel.findOne({
            email,
            isUsed: false,
            expiresAt: { $gt: new Date() },
        });

        if (existingOtp) {
            console.log('‚ö†Ô∏è Existing OTP found');
            const remainingTime = Math.ceil((existingOtp.expiresAt - new Date()) / 1000);
            throw new ApiError(
                StatusCodes.TOO_MANY_REQUESTS,
                `M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i. Vui l√≤ng th·ª≠ l·∫°i sau ${remainingTime} gi√¢y`,
            );
        }

        console.log('‚úÖ Step 3: Generating new OTP');

        const otp = generateOTP();
        const expiresAt = new Date(Date.now() + 1.5 * 60 * 1000);

        console.log('üìù OTP generated:', otp, 'expires at:', expiresAt);

        const otpRecord = await OtpModel.create({
            email,
            otp,
            expiresAt,
            isUsed: false,
        });

        console.log('‚úÖ Step 4: OTP saved to database:', otpRecord._id);

        // ‚úÖ Th√™m plain text version (Quan tr·ªçng ƒë·ªÉ tr√°nh spam)
        const textContent = `
            Xin ch√†o ${user.fullName || user.username},

            B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n SmartKindly c·ªßa m√¨nh.

            M√É OTP C·ª¶A B·∫†N: ${otp}

            M√£ n√†y c√≥ hi·ªáu l·ª±c trong 60 gi√¢y.

            N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y ho·∫∑c li√™n h·ªá v·ªõi qu·∫£n tr·ªã vi√™n.

            ---
            Tr√¢n tr·ªçng,
            SmartKindly - H·ªá th·ªëng qu·∫£n l√Ω tr∆∞·ªùng m·∫ßm non
            Website: https://smartkindly.vn
            Email: support@phuoctrandev.me
            Hotline: 1900 xxxx

            ¬© ${new Date().getFullYear()} SmartKindly. All rights reserved.
                    `.trim();

        // ‚úÖ HTML version v·ªõi c·∫£i ti·∫øn ch·ªëng spam
        const htmlContent = `
            <!DOCTYPE html>
            <html lang="vi">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u - SmartKindly</title>
            </head>
            <body style="margin: 0; padding: 0; font-family: Arial, Helvetica, sans-serif; background-color: #f4f4f4;">
                <table role="presentation" cellpadding="0" cellspacing="0" width="100%" style="background-color: #f4f4f4; padding: 20px 0;">
                    <tr>
                        <td align="center">
                            <table role="presentation" cellpadding="0" cellspacing="0" width="600" style="background-color: white; border-radius: 10px; overflow: hidden; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                                
                                <!-- Header -->
                                <tr>
                                    <td style="padding: 30px; text-align: center; border-bottom: 2px solid #667eea;">
                                        <h1 style="color: #667eea; margin: 0; font-size: 28px;">SmartKindly</h1>
                                        <p style="color: #666; margin: 5px 0 0 0; font-size: 14px; opacity: 0.9;">H·ªá th·ªëng qu·∫£n l√Ω tr∆∞·ªùng m·∫ßm non c√¥ng l·∫≠p</p>
                                    </td>
                                </tr>
                                
                                <!-- Body -->
                                <tr>
                                    <td style="padding: 40px 30px;">
                                        <h2 style="color: #333; margin: 0 0 20px 0; font-size: 22px;">X√°c th·ª±c ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>
                                        
                                        <p style="color: #666; line-height: 1.6; margin: 0 0 20px 0; font-size: 15px;">
                                            Xin ch√†o <strong>${user.fullName || user.username}</strong>,
                                        </p>
                                        
                                        <p style="color: #666; line-height: 1.6; margin: 0 0 30px 0; font-size: 15px;">
                                            B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa m√¨nh. 
                                            Vui l√≤ng s·ª≠ d·ª•ng m√£ OTP b√™n d∆∞·ªõi ƒë·ªÉ x√°c th·ª±c:
                                        </p>
                                        
                                        <!-- OTP Box -->
                                        <table role="presentation" cellpadding="0" cellspacing="0" width="100%" style="margin: 0 0 30px 0;">
                                            <tr>
                                                <td align="center" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; border-radius: 10px;">
                                                    <p style="color: white; margin: 0 0 10px 0; font-size: 14px; text-transform: uppercase; letter-spacing: 1px;">M√£ x√°c th·ª±c OTP</p>
                                                    <h1 style="color: white; margin: 0; font-size: 42px; letter-spacing: 12px; font-weight: bold; font-family: 'Courier New', monospace;">${otp}</h1>
                                                </td>
                                            </tr>
                                        </table>
                                        
                                        <!-- Warning Box -->
                                        <table role="presentation" cellpadding="0" cellspacing="0" width="100%" style="margin: 0 0 30px 0;">
                                            <tr>
                                                <td style="background-color: #fff3cd; border-left: 4px solid #ffc107; padding: 15px; border-radius: 5px;">
                                                    <p style="color: #856404; margin: 0; font-size: 14px; line-height: 1.5;">
                                                        <strong>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong> M√£ OTP c√≥ hi·ªáu l·ª±c trong <strong>60 gi√¢y</strong><br>
                                                    </p>
                                                </td>
                                            </tr>
                                        </table>
                                        
                                        <!-- Contact Info -->
                                        <table role="presentation" cellpadding="0" cellspacing="0" width="100%" style="margin: 30px 0 0 0;">
                                            <tr>
                                                <td style="padding: 15px; background-color: #f8f9fa; border-radius: 5px;">
                                                    <p style="color: #666; font-size: 13px; line-height: 1.6; margin: 0;">
                                                        <strong>C·∫ßn h·ªó tr·ª£?</strong><br>
                                                        üìû Hotline: <a href="tel:0327546610" style="color: #667eea; text-decoration: none;">0327546610</a><br>
                                                        üåê Website: <a href="https://smartkindly.vn" style="color: #667eea; text-decoration: none;">smartkindly.vn</a>
                                                    </p>
                                                </td>
                                            </tr>
                                        </table>
                                    </td>
                                </tr>
                                
                                <!-- Footer -->
                                <tr>
                                    <td style="background-color: #f8f9fa; padding: 20px 30px; border-top: 1px solid #e0e0e0; text-align: center;">
                                        <p style="color: #999; font-size: 12px; margin: 0 0 5px 0;">
                                            ¬© ${new Date().getFullYear()} SmartKindly - H·ªá th·ªëng qu·∫£n l√Ω tr∆∞·ªùng m·∫ßm non
                                        </p>
                                        <p style="color: #999; font-size: 11px; margin: 0;">
                                            Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng. Vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.
                                        </p>
                                        <p style="color: #999; font-size: 11px; margin: 10px 0 0 0;">
                                            <a href="https://smartkindly.vn/privacy" style="color: #667eea; text-decoration: none;">Ch√≠nh s√°ch b·∫£o m·∫≠t</a> | 
                                            <a href="https://smartkindly.vn/terms" style="color: #667eea; text-decoration: none;">ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng</a>
                                        </p>
                                    </td>
                                </tr>
                                
                            </table>
                        </td>
                    </tr>
                </table>
            </body>
            </html>
        `;

        console.log('üìß Step 5: Sending email via Resend to:', email);

        // ‚úÖ G·ª≠i v·ªõi c·∫£ text v√† html version
        await ResendProvider.sendEmail({
            to: [email],
            subject: 'M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u - SmartKindly',
            html: htmlContent,
            text: textContent, // ‚úÖ Th√™m text version
        });

        console.log('‚úÖ Step 6: Email sent successfully via Resend');

        return {
            message: 'M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n',
            expiresIn: 60,
            ...(env.BUILD_MODE === 'dev' && {
                devInfo: {
                    otp: otp,
                    email: email,
                },
            }),
        };
    } catch (error) {
        console.error('‚ùå Error in sendOtpToEmail:', {
            message: error.message,
            stack: error.stack,
        });

        if (error instanceof ApiError) throw error;

        throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, `L·ªói khi g·ª≠i m√£ OTP: ${error.message}`);
    }
};

const verifyOtp = async (email, otp) => {
    try {
        console.log('üîç Verifying OTP for:', email);

        // T√¨m OTP h·ª£p l·ªá (ch∆∞a s·ª≠ d·ª•ng v√† ch∆∞a h·∫øt h·∫°n)
        const otpRecord = await OtpModel.findOne({
            email,
            otp,
            isUsed: false,
            expiresAt: { $gt: new Date() },
        });

        if (!otpRecord) {
            console.log('‚ùå Invalid or expired OTP');
            throw new ApiError(StatusCodes.BAD_REQUEST, 'M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
        }

        console.log('‚úÖ OTP verified, marking as used');

        // ‚úÖ ƒê√°nh d·∫•u OTP ƒë√£ ƒë∆∞·ª£c verify v√† GIA H·∫†N th√™m 5 ph√∫t ƒë·ªÉ reset password
        otpRecord.isUsed = true;
        otpRecord.expiresAt = new Date(Date.now() + 5 * 60 * 1000); // Gia h·∫°n th√™m 5 ph√∫t
        await otpRecord.save();

        return {
            message: 'X√°c th·ª±c OTP th√†nh c√¥ng. B·∫°n c√≥ 5 ph√∫t ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.',
            email: otpRecord.email,
        };
    } catch (error) {
        console.error('‚ùå Error in verifyOtp:', error.message);
        if (error instanceof ApiError) throw error;
        throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, `L·ªói khi x√°c th·ª±c OTP: ${error.message}`);
    }
};

const resetPasswordWithOtp = async (email, otp, newPassword) => {
    try {
        console.log('üîç Resetting password for:', email);

        // Ki·ªÉm tra OTP c√≥ h·ª£p l·ªá v√† ƒë√£ ƒë∆∞·ª£c verify kh√¥ng
        const otpRecord = await OtpModel.findOne({
            email,
            otp,
            isUsed: true, // Ph·∫£i l√† OTP ƒë√£ ƒë∆∞·ª£c verify
            expiresAt: { $gt: new Date() },
        });

        if (!otpRecord) {
            console.log('‚ùå Invalid OTP for reset password');
            console.log('Debug info:', {
                email,
                otp,
                currentTime: new Date(),
            });

            // Ki·ªÉm tra xem c√≥ OTP n√†o kh√¥ng
            const anyOtp = await OtpModel.findOne({ email, otp });
            if (anyOtp) {
                console.log('OTP found but:', {
                    isUsed: anyOtp.isUsed,
                    expiresAt: anyOtp.expiresAt,
                    expired: anyOtp.expiresAt < new Date(),
                });

                if (anyOtp.expiresAt < new Date()) {
                    throw new ApiError(StatusCodes.BAD_REQUEST, 'M√£ OTP ƒë√£ h·∫øt hi·ªáu l·ª±c. Vui l√≤ng y√™u c·∫ßu m√£ OTP m·ªõi.');
                }
            }

            throw new ApiError(StatusCodes.BAD_REQUEST, 'M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c');
        }

        // T√¨m user theo email
        const user = await UserModel.findOne({ email, _destroy: false });

        if (!user) {
            console.log('‚ùå User not found');
            throw new ApiError(StatusCodes.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
        }

        console.log('‚úÖ Updating password for user:', user.username);

        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
        user.password = newPassword;
        await user.save();

        console.log('‚úÖ Password updated successfully');

        // X√≥a t·∫•t c·∫£ OTP c·ªßa email n√†y
        await OtpModel.deleteMany({ email });

        console.log('‚úÖ OTP records cleaned up');

        return {
            message: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng. B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p b·∫±ng m·∫≠t kh·∫©u m·ªõi.',
        };
    } catch (error) {
        console.error('‚ùå Error in resetPasswordWithOtp:', error.message);
        if (error instanceof ApiError) throw error;
        throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, `L·ªói khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: ${error.message}`);
    }
};
// ‚úÖ T·ªëi ∆∞u getInfoUserDetails
const getInfoUserDetails = async (userId) => {
    try {
        // ‚úÖ Parallel query user + school
        const [user, school] = await Promise.all([
            UserModel.findOne({ _id: userId, _destroy: false })
                .select('-password') // ‚úÖ Lo·∫°i password
                .lean(),

            // ‚úÖ Fetch school n·∫øu c√≥ schoolId
            userId
                ? (async () => {
                      const u = await UserModel.findById(userId).select('schoolId').lean();
                      if (u?.schoolId) {
                          return SchoolModel.findOne({
                              schoolId: u.schoolId,
                              _destroy: false,
                          })
                              .select('name abbreviation')
                              .lean();
                      }
                      return null;
                  })()
                : null,
        ]);

        if (!user) {
            throw new ApiError(StatusCodes.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
        }

        return {
            ...user,
            school,
        };
    } catch (error) {
        if (error instanceof ApiError) throw error;
        throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng');
    }
};

export const userServices = {
    getInfoUserDetails, // ‚úÖ Export
    login,
    logout,
    refreshToken,
    sendOtpToEmail,
    verifyOtp,
    resetPasswordWithOtp,
};
