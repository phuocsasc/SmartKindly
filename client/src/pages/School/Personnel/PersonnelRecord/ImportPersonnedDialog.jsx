// client/src/pages/School/Personnel/PersonnelRecord/ImportPersonnelDialog.jsx
import { useState } from 'react';
import {
    Dialog,
    DialogTitle,
    DialogContent,
    DialogActions,
    Button,
    Box,
    Typography,
    IconButton,
    Alert,
    LinearProgress,
    Chip,
    Avatar,
} from '@mui/material';
import CloseIcon from '@mui/icons-material/Close';
import CloudUploadIcon from '@mui/icons-material/CloudUpload';
import FileDownloadIcon from '@mui/icons-material/FileDownload';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import ErrorIcon from '@mui/icons-material/Error';
import * as XLSX from 'xlsx';
import { personnelRecordApi } from '~/apis/personnelRecordApi';
import { exportPersonnelRecordsToExcel } from '~/utils/personnelRecordExcelExport';
import { toast } from 'react-toastify';
import dayjs from 'dayjs';

function ImportPersonnelDialog({ open, onClose, onSuccess, schoolName }) {
    const [file, setFile] = useState(null);
    const [loading, setLoading] = useState(false);
    const [previewData, setPreviewData] = useState(null);
    const [validationErrors, setValidationErrors] = useState([]);

    // ‚úÖ Handler: Download file Excel m·∫´u
    const handleDownloadTemplate = async () => {
        try {
            // T·∫°o file m·∫´u v·ªõi 0 records (ch·ªâ c√≥ header)
            await exportPersonnelRecordsToExcel([], schoolName);
            toast.success('T·∫£i file Excel m·∫´u th√†nh c√¥ng!');
        } catch (error) {
            console.error('Error downloading template:', error);
            toast.error('L·ªói khi t·∫£i file m·∫´u!');
        }
    };

    // ‚úÖ Handler: Ch·ªçn file
    const handleFileChange = (event) => {
        const selectedFile = event.target.files[0];
        if (!selectedFile) return;

        // Validate file type
        const validTypes = [
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'application/vnd.ms-excel',
        ];
        if (!validTypes.includes(selectedFile.type)) {
            toast.error('Vui l√≤ng ch·ªçn file Excel (.xlsx, .xls)!');
            return;
        }

        setFile(selectedFile);
        parseExcelFile(selectedFile);
    };

    // ‚úÖ Parse Excel file
    const parseExcelFile = (file) => {
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const data = new Uint8Array(e.target.result);
                const workbook = XLSX.read(data, { type: 'array' });
                const sheetName = workbook.SheetNames[0];
                const worksheet = workbook.Sheets[sheetName];

                // ‚úÖ FIX: Parse t·ª´ row 5 (header th·ª±c t·∫ø), b·ªè qua 4 d√≤ng ti√™u ƒë·ªÅ
                const jsonData = XLSX.utils.sheet_to_json(worksheet, {
                    range: 4, // ‚úÖ B·∫Øt ƒë·∫ßu t·ª´ row 5 (index 4)
                    header: 1, // ‚úÖ D√πng array thay v√¨ object
                    defval: '',
                });

                console.log('üìä Raw Excel Data:', jsonData.slice(0, 3));

                if (jsonData.length <= 1) {
                    // Ch·ªâ c√≥ header
                    toast.error('File Excel kh√¥ng c√≥ d·ªØ li·ªáu!');
                    return;
                }

                // ‚úÖ L·∫•y header t·ª´ row ƒë·∫ßu ti√™n
                const headers = jsonData[0];
                console.log('üìã Headers:', headers);

                // ‚úÖ Parse data t·ª´ row th·ª© 2 tr·ªü ƒëi
                const mappedData = jsonData
                    .slice(1) // B·ªè qua header
                    .map((row, index) => {
                        // ‚úÖ Map theo index thay v√¨ t√™n column
                        const mapped = {
                            rowNumber: index + 6, // Row number th·ª±c t·∫ø trong Excel
                            personnelCode: String(row[1] || '').trim(), // Column B: M√£ c√°n b·ªô
                            fullName: String(row[2] || '').trim(), // Column C: H·ªç v√† t√™n
                            department: String(row[3] || '').trim(), // Column D: T·ªï b·ªô m√¥n
                            identificationNumber: String(row[4] || '').trim(), // Column E: M√£ ƒë·ªãnh danh
                            gender: String(row[5] || '').trim(), // Column F: Gi·ªõi t√≠nh
                            dateOfBirth: parseExcelDate(row[6]), // Column G: Ng√†y sinh
                            workStatus: String(row[7] || '').trim(), // Column H: Tr·∫°ng th√°i
                            placeOfBirth: String(row[8] || '').trim(), // Column I: N∆°i sinh
                            dateJoinedSchool: parseExcelDate(row[9]), // Column J: Ng√†y v√†o tr∆∞·ªùng
                            email: String(row[10] || '').trim(), // Column K: Email
                            workPosition: String(row[11] || '').trim(), // Column L: V·ªã tr√≠ l√†m vi·ªác
                            positionGroup: String(row[12] || '').trim(), // Column M: Nh√≥m ch·ª©c v·ª•
                            ethnicity: String(row[13] || 'Kinh').trim(), // Column N: D√¢n t·ªôc
                            religion: String(row[14] || '').trim(), // Column O: T√¥n gi√°o
                            mainTeachingLevel: String(row[15] || '').trim(), // Column P: C·∫•p d·∫°y ch√≠nh
                            contractType: String(row[16] || '').trim(), // Column Q: H√¨nh th·ª©c h·ª£p ƒë·ªìng
                            teachingSubject: String(row[17] || '').trim(), // Column R: M√¥n d·∫°y
                            rankLevel: String(row[18] || '').trim(), // Column S: Ng·∫°ch/h·∫°ng
                            salaryCoefficient: parseNumber(row[19]), // Column T: H·ªá s·ªë l∆∞∆°ng
                            salaryGrade: String(row[20] || '').trim(), // Column U: B·∫≠c l∆∞∆°ng
                            salaryEffectiveDate: parseExcelDate(row[21]), // Column V: Ng√†y h∆∞·ªüng l∆∞∆°ng
                            professionalAllowance: parseNumber(row[22]), // Column W: M·ª©c ph·ª• c·∫•p ∆∞u ƒë√£i ngh·ªÅ
                            leadershipAllowance: parseNumber(row[23]), // Column X: M·ª©c ph·ª• c·∫•p ch·ª©c v·ª• l√£nh ƒë·∫°o
                            idCardNumber: String(row[24] || '').trim(), // Column Y: S·ªë CMND
                            idCardIssueDate: parseExcelDate(row[25]), // Column Z: Ng√†y c·∫•p
                            idCardIssuePlace: String(row[26] || '').trim(), // Column AA: N∆°i c·∫•p
                            phone: String(row[27] || '').trim(), // Column AB: S·ªë ƒëi·ªán tho·∫°i
                            socialInsuranceNumber: String(row[28] || '').trim(), // Column AC: S·ªë s·ªï BHXH
                            detailedAddress: String(row[29] || '').trim(), // Column AD: ƒê·ªãa ch·ªâ
                            healthStatus: String(row[30] || '').trim(), // Column AE: S·ª©c kh·ªèe
                            isYouthUnionMember: String(row[31] || '').trim(), // Column AF: ƒêo√†n vi√™n
                            isPartyMember: String(row[32] || '').trim(), // Column AG: ƒê·∫£ng vi√™n
                            isTradeUnionMember: String(row[33] || '').trim(), // Column AH: C√¥ng ƒëo√†n vi√™n
                            familyBackground: String(row[34] || '').trim(), // Column AI: Th√†nh ph·∫ßn gia ƒë√¨nh
                            fatherName: String(row[35] || '').trim(), // Column AJ: H·ªç t√™n b·ªë
                            fatherBirthYear: parseYear(row[36]), // Column AK: NƒÉm sinh b·ªë
                            fatherOccupation: String(row[37] || '').trim(), // Column AL: Ngh·ªÅ nghi·ªáp b·ªë
                            fatherWorkplace: String(row[38] || '').trim(), // Column AM: N∆°i l√†m vi·ªác c·ªßa b·ªë
                            motherName: String(row[39] || '').trim(), // Column AN: H·ªç t√™n m·∫π
                            motherBirthYear: parseYear(row[40]), // Column AO: NƒÉm sinh m·∫π
                            motherOccupation: String(row[41] || '').trim(), // Column AP: Ngh·ªÅ nghi·ªáp m·∫π
                            motherWorkplace: String(row[42] || '').trim(), // Column AQ: N∆°i l√†m vi·ªác c·ªßa m·∫π
                            spouseName: String(row[43] || '').trim(), // Column AR: H·ªç t√™n v·ª£/ch·ªìng
                            spouseBirthYear: parseYear(row[44]), // Column AS: NƒÉm sinh v·ª£/ch·ªìng
                            spouseOccupation: String(row[45] || '').trim(), // Column AT: Ngh·ªÅ nghi·ªáp v·ª£/ch·ªìng
                            spouseWorkplace: String(row[46] || '').trim(), // Column AU: N∆°i l√†m vi·ªác c·ªßa v·ª£/ch·ªìng
                            highestProfessionalDegree: String(row[47] || '').trim(), // Column AV: Tr√¨nh ƒë·ªô CMNV
                            mainMajor: String(row[48] || '').trim(), // Column AW: Chuy√™n ng√†nh ch√≠nh
                            majorDegreeLevel: String(row[49] || '').trim(), // Column AX: Tr√¨nh ƒë·ªô chuy√™n ng√†nh
                            mainForeignLanguage: String(row[50] || '').trim(), // Column AY: Ngo·∫°i ng·ªØ ch√≠nh
                            foreignLanguageLevel: String(row[51] || '').trim(), // Column AZ: Tr√¨nh ƒë·ªô ngo·∫°i ng·ªØ
                            languageCertificateGroup: String(row[52] || '').trim(), // Column BA: Nh√≥m ch·ª©ng ch·ªâ
                            itLevel: String(row[53] || '').trim(), // Column BB: Tr√¨nh ƒë·ªô tin h·ªçc
                            politicalTheoryLevel: String(row[54] || '').trim(), // Column BC: Tr√¨nh ƒë·ªô l√Ω lu·∫≠n
                            recruitmentDate: parseExcelDate(row[55]), // Column BD: Ng√†y tuy·ªÉn d·ª•ng
                        };

                        // ‚úÖ Debug: Log row ƒë·∫ßu ti√™n
                        if (index < 2) {
                            console.log(`üìù Mapped Row ${mapped.rowNumber}:`, mapped);
                        }

                        return mapped;
                    })
                    // ‚úÖ L·ªçc b·ªè c√°c d√≤ng tr·ªëng
                    .filter((row) => {
                        const hasData =
                            row.fullName !== '' ||
                            row.email !== '' ||
                            row.phone !== '' ||
                            row.idCardNumber !== '' ||
                            row.department !== '' ||
                            row.gender !== '';

                        if (hasData) {
                            console.log(`‚úÖ Row ${row.rowNumber} HAS DATA:`, {
                                fullName: row.fullName,
                                department: row.department,
                                email: row.email,
                            });
                        }

                        return hasData;
                    });

                console.log('‚úÖ Final Filtered Data:', mappedData);

                // ‚úÖ Ki·ªÉm tra sau khi l·ªçc
                if (mappedData.length === 0) {
                    toast.error('File Excel kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá!');
                    return;
                }

                // Validate data
                const errors = validateImportData(mappedData);
                setValidationErrors(errors);
                setPreviewData(mappedData);
            } catch (error) {
                console.error('‚ùå Error parsing Excel:', error);
                toast.error('L·ªói khi ƒë·ªçc file Excel!');
            }
        };
        reader.readAsArrayBuffer(file);
    };

    // ‚úÖ Helper: Parse Excel date (Excel stores dates as numbers)
    const parseExcelDate = (value) => {
        if (!value) return null;

        // If already a date string
        if (typeof value === 'string' && value.includes('/')) {
            const parts = value.split('/');
            if (parts.length === 3) {
                return dayjs(`${parts[2]}-${parts[1]}-${parts[0]}`).toISOString();
            }
        }

        // If Excel serial date
        if (typeof value === 'number') {
            const date = XLSX.SSF.parse_date_code(value);
            return dayjs(`${date.y}-${date.m}-${date.d}`).toISOString();
        }

        return null;
    };

    // ‚úÖ Helper: Parse number
    const parseNumber = (value) => {
        if (!value || value === '') return null;
        const num = Number(value);
        return isNaN(num) ? null : num;
    };

    // ‚úÖ Helper: Parse year
    const parseYear = (value) => {
        if (!value || value === '') return null;
        const year = parseInt(value, 10);
        return isNaN(year) ? null : year;
    };

    // ‚úÖ Validate import data
    const validateImportData = (data) => {
        const errors = [];

        data.forEach((row) => {
            const rowErrors = [];

            // Required fields
            if (!row.fullName.trim()) rowErrors.push('Thi·∫øu h·ªç t√™n');
            if (!row.department) rowErrors.push('Thi·∫øu t·ªï b·ªô m√¥n');
            if (!row.gender) rowErrors.push('Thi·∫øu gi·ªõi t√≠nh');
            if (!row.dateOfBirth) rowErrors.push('Thi·∫øu ng√†y sinh');
            if (!row.dateJoinedSchool) rowErrors.push('Thi·∫øu ng√†y v√†o tr∆∞·ªùng');
            if (!row.email.trim()) rowErrors.push('Thi·∫øu email');
            if (!row.workPosition) rowErrors.push('Thi·∫øu v·ªã tr√≠ l√†m vi·ªác');
            if (!row.positionGroup) rowErrors.push('Thi·∫øu nh√≥m ch·ª©c v·ª•');
            if (!row.mainTeachingLevel) rowErrors.push('Thi·∫øu c·∫•p d·∫°y ch√≠nh');
            if (!row.contractType) rowErrors.push('Thi·∫øu h√¨nh th·ª©c h·ª£p ƒë·ªìng');
            if (!row.idCardNumber.trim()) rowErrors.push('Thi·∫øu s·ªë CMND');
            if (!row.phone.trim()) rowErrors.push('Thi·∫øu s·ªë ƒëi·ªán tho·∫°i');
            if (!row.majorDegreeLevel) rowErrors.push('Thi·∫øu tr√¨nh ƒë·ªô chuy√™n ng√†nh ch√≠nh');

            if (rowErrors.length > 0) {
                errors.push({
                    row: row.rowNumber,
                    errors: rowErrors,
                });
            }
        });

        return errors;
    };

    // ‚úÖ Handler: Upload data
    const handleUpload = async () => {
        if (!previewData || previewData.length === 0) {
            toast.error('Vui l√≤ng ch·ªçn file Excel!');
            return;
        }

        if (validationErrors.length > 0) {
            toast.error('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá, vui l√≤ng ki·ªÉm tra l·∫°i!');
            return;
        }

        try {
            setLoading(true);

            // ‚úÖ Helper: Convert empty string to null
            // const cleanValue = (value) => {
            //     if (value === '' || value === null || value === undefined) {
            //         return null;
            //     }
            //     return value;
            // };

            // Nh·ªØng enum ch·∫•p nh·∫≠n r·ªóng: ph·∫£i g·ª≠i '' (kh√¥ng g·ª≠i null)
            const ENUM_EMPTY_STRING_FIELDS = new Set([
                'isYouthUnionMember',
                'isPartyMember',
                'isTradeUnionMember',
                'familyBackground',
                'highestProfessionalDegree',
                'languageCertificateGroup',
                'politicalTheoryLevel',
            ]);

            // Enum kh√¥ng b·∫Øt bu·ªôc nh∆∞ng kh√¥ng n√™n g·ª≠i ''/null khi tr·ªëng => b·ªè h·∫≥n key
            const OPTIONAL_ENUM_UNDEFINED_IF_EMPTY = new Set([
                'teachingSubject', // Nh√† tr·∫ª / M·∫´u gi√°o; n·∫øu tr·ªëng th√¨ x√≥a field
            ]);

            const normalizeDigits = (v) => String(v ?? '').replace(/\D/g, '');

            const normalizePhone = (v) => {
                let s = String(v ?? '').trim();
                s = s.replace(/\D/g, ''); // ch·ªâ gi·ªØ s·ªë
                if (s.startsWith('84') && s.length >= 11) {
                    s = '0' + s.slice(2); // 84xxxxxxxx -> 0xxxxxxxx
                }
                if (s.length === 9) s = '0' + s; // b√π 0 ƒë·∫ßu n·∫øu Excel l√†m r∆°i
                return s;
            };

            // ‚úÖ Prepare data: Convert ALL empty strings to null
            const dataToSubmit = previewData.map((row) => {
                // eslint-disable-next-line no-unused-vars
                const { rowNumber, ...raw } = row; // b·ªè s·ªë d√≤ng excel
                const obj = { ...raw };

                // Chu·∫©n ho√° m·ªôt s·ªë tr∆∞·ªùng s·ªë/phone
                obj.phone = normalizePhone(obj.phone);
                obj.idCardNumber = normalizeDigits(obj.idCardNumber);

                // Duy·ªát m·ªçi key ƒë·ªÉ x·ª≠ l√Ω '' / null / undefined cho ƒë√∫ng lu·∫≠t
                for (const [k, v] of Object.entries(obj)) {
                    const isEmpty = v === '' || v === null || v === undefined;

                    if (isEmpty) {
                        if (ENUM_EMPTY_STRING_FIELDS.has(k)) {
                            obj[k] = ''; // enum cho ph√©p r·ªóng => gi·ªØ ''
                        } else if (OPTIONAL_ENUM_UNDEFINED_IF_EMPTY.has(k)) {
                            delete obj[k]; // enum kh√¥ng b·∫Øt bu·ªôc => x√≥a key
                        } else {
                            obj[k] = null; // c√°c field th∆∞·ªùng => null
                        }
                    }
                }

                return obj;
            });

            console.log('üì§ Data to submit:', dataToSubmit.slice(0, 2));

            // Call API import
            const res = await personnelRecordApi.importBulk(dataToSubmit);

            const { created, updated, errors } = res.data.data;

            if (errors && errors.length > 0) {
                toast.warning(`Ho√†n th√†nh v·ªõi ${errors.length} l·ªói. ƒê√£ th√™m ${created}, c·∫≠p nh·∫≠t ${updated}.`);
                setValidationErrors(errors.map((err, idx) => ({ row: idx + 6, errors: [err.message] })));
            } else {
                toast.success(`Import th√†nh c√¥ng! ƒê√£ th√™m ${created} v√† c·∫≠p nh·∫≠t ${updated} h·ªì s∆°.`);
                onSuccess();
                handleClose();
            }
        } catch (error) {
            console.error('Error importing data:', error);
            toast.error(error?.response?.data?.message || 'L·ªói khi import d·ªØ li·ªáu!');
        } finally {
            setLoading(false);
        }
    };

    // ‚úÖ Handler: Close dialog
    const handleClose = () => {
        setFile(null);
        setPreviewData(null);
        setValidationErrors([]);
        onClose();
    };

    return (
        <Dialog open={open} onClose={handleClose} maxWidth="md" fullWidth>
            {/* Header */}
            <DialogTitle
                sx={{
                    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                    color: '#fff',
                    py: 1.5,
                    position: 'relative',
                }}
            >
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5 }}>
                    <Avatar sx={{ bgcolor: 'rgba(255, 255, 255, 0.2)', width: 32, height: 32 }}>
                        <CloudUploadIcon fontSize="small" />
                    </Avatar>
                    <Typography variant="h6" fontWeight={600}>
                        Nh·∫≠p th√¥ng tin c√°n b·ªô t·ª´ Excel
                    </Typography>
                </Box>
                <IconButton
                    onClick={handleClose}
                    size="small"
                    sx={{
                        position: 'absolute',
                        right: 8,
                        top: 8,
                        color: 'white',
                        '&:hover': { bgcolor: 'rgba(255, 255, 255, 0.1)' },
                    }}
                >
                    <CloseIcon />
                </IconButton>
            </DialogTitle>

            {/* Content */}
            <DialogContent sx={{ px: 3, py: 2.5 }}>
                {/* Step 1: Download template */}
                <Box sx={{ mb: 3 }}>
                    <Typography variant="subtitle2" fontWeight={600} sx={{ mb: 1 }}>
                        B∆∞·ªõc 1: T·∫£i file Excel m·∫´u
                    </Typography>
                    <Button
                        variant="outlined"
                        startIcon={<FileDownloadIcon />}
                        onClick={handleDownloadTemplate}
                        sx={{ borderRadius: 1.5 }}
                    >
                        T·∫£i file Excel m·∫´u
                    </Button>
                </Box>

                {/* Step 2: Upload file */}
                <Box sx={{ mb: 3 }}>
                    <Typography variant="subtitle2" fontWeight={600} sx={{ mb: 1 }}>
                        B∆∞·ªõc 2: Ch·ªçn file Excel ƒë√£ nh·∫≠p d·ªØ li·ªáu
                    </Typography>
                    <Box
                        sx={{
                            border: '2px dashed #667eea',
                            borderRadius: 2,
                            p: 3,
                            textAlign: 'center',
                            bgcolor: '#f5f5ff',
                            cursor: 'pointer',
                            '&:hover': { bgcolor: '#ebebff' },
                        }}
                        onClick={() => document.getElementById('file-input').click()}
                    >
                        <input
                            id="file-input"
                            type="file"
                            accept=".xlsx,.xls"
                            style={{ display: 'none' }}
                            onChange={handleFileChange}
                        />
                        <CloudUploadIcon sx={{ fontSize: 48, color: '#667eea', mb: 1 }} />
                        <Typography variant="body1" fontWeight={600} sx={{ mb: 0.5 }}>
                            {file ? file.name : 'Ch·ªçn file Excel'}
                        </Typography>
                        <Typography variant="body2" color="text.secondary">
                            Ho·∫∑c k√©o th·∫£ file v√†o ƒë√¢y
                        </Typography>
                    </Box>
                </Box>

                {/* Preview & Validation */}
                {previewData && (
                    <Box>
                        <Alert
                            severity={validationErrors.length === 0 ? 'success' : 'error'}
                            icon={validationErrors.length === 0 ? <CheckCircleIcon /> : <ErrorIcon />}
                            sx={{ mb: 2 }}
                        >
                            {validationErrors.length === 0 ? (
                                <Typography variant="body2">
                                    ‚úÖ Ph√°t hi·ªán <strong>{previewData.length}</strong> h·ªì s∆° h·ª£p l·ªá
                                </Typography>
                            ) : (
                                <Typography variant="body2">
                                    ‚ùå C√≥ <strong>{validationErrors.length}</strong> h√†ng d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
                                </Typography>
                            )}
                        </Alert>

                        {/* Show validation errors */}
                        {validationErrors.length > 0 && (
                            <Box
                                sx={{
                                    maxHeight: 200,
                                    overflowY: 'auto',
                                    border: '1px solid #f44336',
                                    borderRadius: 1,
                                    p: 1,
                                    bgcolor: '#ffebee',
                                }}
                            >
                                {validationErrors.map((error, idx) => (
                                    <Box key={idx} sx={{ mb: 1 }}>
                                        <Chip label={`D√≤ng ${error.row}`} size="small" color="error" sx={{ mr: 1 }} />
                                        <Typography variant="body2" component="span">
                                            {error.errors.join(', ')}
                                        </Typography>
                                    </Box>
                                ))}
                            </Box>
                        )}

                        {/* Show success stats */}
                        {validationErrors.length === 0 && (
                            <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
                                <Chip
                                    label={`${previewData.filter((r) => !r.personnelCode).length} h·ªì s∆° m·ªõi`}
                                    color="success"
                                    size="small"
                                />
                                <Chip
                                    label={`${previewData.filter((r) => r.personnelCode).length} h·ªì s∆° c·∫≠p nh·∫≠t`}
                                    color="info"
                                    size="small"
                                />
                            </Box>
                        )}
                    </Box>
                )}

                {/* Loading */}
                {loading && <LinearProgress sx={{ mt: 2 }} />}
            </DialogContent>

            {/* Actions */}
            <DialogActions sx={{ px: 3, py: 2, gap: 1 }}>
                <Button onClick={handleClose} variant="outlined" color="inherit" sx={{ borderRadius: 1.5 }}>
                    H·ªßy
                </Button>
                <Button
                    onClick={handleUpload}
                    variant="contained"
                    disabled={!previewData || validationErrors.length > 0 || loading}
                    sx={{ borderRadius: 1.5, px: 3 }}
                >
                    {loading ? 'ƒêang t·∫£i l√™n...' : 'T·∫£i l√™n'}
                </Button>
            </DialogActions>
        </Dialog>
    );
}

export default ImportPersonnelDialog;
