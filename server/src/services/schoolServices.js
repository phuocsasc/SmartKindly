import { SchoolModel } from '~/models/schoolModel';
import { slugify } from '~/utils/formatters';
import ApiError from '~/utils/ApiError';
import { StatusCodes } from 'http-status-codes';
import { UserModel } from '~/models/userModel';

const createNew = async (data) => {
    try {
        // Ki·ªÉm tra t√™n tr∆∞·ªùng ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingSchool = await SchoolModel.findOne({
            name: data.name,
            _destroy: false,
        });

        if (existingSchool) {
            throw new ApiError(StatusCodes.CONFLICT, 'T√™n tr∆∞·ªùng h·ªçc ƒë√£ t·ªìn t·∫°i');
        }

        // Ki·ªÉm tra t√™n vi·∫øt t·∫Øt ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingAbbreviation = await SchoolModel.findOne({
            abbreviation: data.abbreviation.toUpperCase(),
            _destroy: false,
        });

        if (existingAbbreviation) {
            throw new ApiError(StatusCodes.CONFLICT, 'T√™n vi·∫øt t·∫Øt ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng');
        }

        // T·∫°o schoolId t·ª± ƒë·ªông
        const schoolId = await SchoolModel.generateSchoolId();

        // T·∫°o slug v√† ki·ªÉm tra unique
        let baseSlug = slugify(data.name);
        let slug = baseSlug;
        let counter = 1;

        while (await SchoolModel.findOne({ slug, _destroy: false })) {
            slug = `${baseSlug}-${counter}`;
            counter++;
        }

        const newSchool = new SchoolModel({
            ...data,
            schoolId,
            slug,
            abbreviation: data.abbreviation.toUpperCase(),
        });

        return await newSchool.save();
    } catch (error) {
        if (error instanceof ApiError) {
            throw error;
        }
        throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'L·ªói khi t·∫°o tr∆∞·ªùng h·ªçc m·ªõi');
    }
};

const getAll = async (query) => {
    try {
        const { page = 1, limit = 10, search = '', status = '' } = query;
        const skip = (page - 1) * limit;

        const filter = { _destroy: false };

        // T√¨m ki·∫øm theo t√™n tr∆∞·ªùng, ƒë·ªãa ch·ªâ, m√£ tr∆∞·ªùng, t√™n vi·∫øt t·∫Øt
        if (search) {
            filter.$or = [
                { name: { $regex: search, $options: 'i' } },
                { address: { $regex: search, $options: 'i' } },
                { schoolId: { $regex: search, $options: 'i' } },
                { abbreviation: { $regex: search, $options: 'i' } },
                { manager: { $regex: search, $options: 'i' } },
            ];
        }

        // L·ªçc theo tr·∫°ng th√°i
        if (status) {
            filter.status = status;
        }

        const schools = await SchoolModel.find(filter).skip(skip).limit(parseInt(limit)).sort({ createdAt: -1 });

        const total = await SchoolModel.countDocuments(filter);

        return {
            schools,
            pagination: {
                currentPage: parseInt(page),
                totalPages: Math.ceil(total / limit),
                totalItems: total,
                itemsPerPage: parseInt(limit),
            },
        };
    } catch (error) {
        throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'L·ªói khi l·∫•y danh s√°ch tr∆∞·ªùng h·ªçc');
    }
};

const getDetails = async (id) => {
    try {
        const school = await SchoolModel.findOne({ _id: id, _destroy: false });
        if (!school) {
            throw new ApiError(StatusCodes.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y tr∆∞·ªùng h·ªçc');
        }
        return school;
    } catch (error) {
        if (error instanceof ApiError) throw error;
        throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'L·ªói khi l·∫•y th√¥ng tin tr∆∞·ªùng h·ªçc');
    }
};

const update = async (id, data) => {
    try {
        const school = await SchoolModel.findOne({ _id: id, _destroy: false });
        if (!school) {
            throw new ApiError(StatusCodes.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y tr∆∞·ªùng h·ªçc');
        }

        // ‚úÖ Ki·ªÉm tra n·∫øu status thay ƒë·ªïi
        const isStatusChanged = 'status' in data && school.status !== data.status;
        const oldStatus = school.status;
        const newStatus = data.status;

        // Ki·ªÉm tra t√™n tr∆∞·ªùng ƒë√£ t·ªìn t·∫°i (tr·ª´ ch√≠nh n√≥)
        if (data.name) {
            const existingSchool = await SchoolModel.findOne({
                name: data.name,
                _id: { $ne: id },
                _destroy: false,
            });

            if (existingSchool) {
                throw new ApiError(StatusCodes.CONFLICT, 'T√™n tr∆∞·ªùng h·ªçc ƒë√£ t·ªìn t·∫°i');
            }

            // T·∫°o slug m·ªõi
            let baseSlug = slugify(data.name);
            let slug = baseSlug;
            let counter = 1;

            while (await SchoolModel.findOne({ slug, _id: { $ne: id }, _destroy: false })) {
                slug = `${baseSlug}-${counter}`;
                counter++;
            }

            data.slug = slug;
        }

        // Ki·ªÉm tra t√™n vi·∫øt t·∫Øt ƒë√£ t·ªìn t·∫°i (tr·ª´ ch√≠nh n√≥)
        if (data.abbreviation) {
            const existingAbbreviation = await SchoolModel.findOne({
                abbreviation: data.abbreviation.toUpperCase(),
                _id: { $ne: id },
                _destroy: false,
            });

            if (existingAbbreviation) {
                throw new ApiError(StatusCodes.CONFLICT, 'T√™n vi·∫øt t·∫Øt ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng');
            }

            data.abbreviation = data.abbreviation.toUpperCase();
        }

        // Kh√¥ng cho ph√©p thay ƒë·ªïi schoolId
        delete data.schoolId;

        const updatedSchool = await SchoolModel.findByIdAndUpdate(id, data, { new: true, runValidators: true });

        // ‚úÖ X·ª≠ l√Ω thay ƒë·ªïi status c·ªßa users
        if (isStatusChanged) {
            console.log('üîÑ [update] Tr∆∞·ªùng thay ƒë·ªïi tr·∫°ng th√°i:', {
                schoolId: school.schoolId,
                oldStatus,
                newStatus,
            });

            if (newStatus === false) {
                // ‚úÖ Tr∆∞·ªùng chuy·ªÉn sang "Kh√¥ng ho·∫°t ƒë·ªông" ‚Üí V√¥ hi·ªáu h√≥a t·∫•t c·∫£ user
                console.log('‚õî [update] V√¥ hi·ªáu h√≥a t·∫•t c·∫£ user c·ªßa tr∆∞·ªùng...');

                const updateResult = await UserModel.updateMany(
                    {
                        schoolId: school.schoolId,
                        _destroy: false,
                        role: { $ne: 'admin' }, // Kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn admin h·ªá th·ªëng
                    },
                    {
                        status: false,
                    },
                );

                console.log(`‚úÖ [update] ƒê√£ v√¥ hi·ªáu h√≥a ${updateResult.modifiedCount} t√†i kho·∫£n`);
            } else if (newStatus === true) {
                // ‚úÖ Tr∆∞·ªùng chuy·ªÉn sang "Ho·∫°t ƒë·ªông" ‚Üí K√≠ch ho·∫°t l·∫°i t·∫•t c·∫£ user
                console.log('‚úÖ [update] K√≠ch ho·∫°t l·∫°i t·∫•t c·∫£ user c·ªßa tr∆∞·ªùng...');

                const updateResult = await UserModel.updateMany(
                    {
                        schoolId: school.schoolId,
                        _destroy: false,
                        role: { $ne: 'admin' }, // Kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn admin h·ªá th·ªëng
                    },
                    {
                        status: true,
                    },
                );

                console.log(`‚úÖ [update] ƒê√£ k√≠ch ho·∫°t l·∫°i ${updateResult.modifiedCount} t√†i kho·∫£n`);
            }
        }

        return updatedSchool;
    } catch (error) {
        if (error instanceof ApiError) throw error;
        throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'L·ªói khi c·∫≠p nh·∫≠t tr∆∞·ªùng h·ªçc');
    }
};

const deleteSchool = async (id) => {
    try {
        const school = await SchoolModel.findOne({ _id: id, _destroy: false });
        if (!school) {
            throw new ApiError(StatusCodes.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y tr∆∞·ªùng h·ªçc');
        }

        // ‚úÖ Ki·ªÉm tra tr∆∞·ªùng c√≥ ƒëang ho·∫°t ƒë·ªông kh√¥ng (status === true)
        if (school.status === true) {
            throw new ApiError(
                StatusCodes.FORBIDDEN,
                'Kh√¥ng th·ªÉ x√≥a tr∆∞·ªùng ƒëang ho·∫°t ƒë·ªông. Vui l√≤ng chuy·ªÉn sang tr·∫°ng th√°i "Kh√¥ng ho·∫°t ƒë·ªông" tr∆∞·ªõc.',
            );
        }

        // Soft delete - ch·ªâ ƒë√°nh d·∫•u _destroy: true
        await SchoolModel.findByIdAndUpdate(id, { _destroy: true });

        return { message: 'X√≥a tr∆∞·ªùng h·ªçc th√†nh c√¥ng' };
    } catch (error) {
        if (error instanceof ApiError) throw error;
        throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'L·ªói khi x√≥a tr∆∞·ªùng h·ªçc');
    }
};

// ‚úÖ Th√™m logging trong getBySchoolId
const getBySchoolId = async (schoolId) => {
    try {
        console.log('üîç Service getBySchoolId - schoolId:', schoolId);

        const school = await SchoolModel.findOne({ schoolId, _destroy: false });

        if (!school) {
            console.log('‚ùå School not found with schoolId:', schoolId);
            throw new ApiError(StatusCodes.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y th√¥ng tin tr∆∞·ªùng h·ªçc');
        }

        console.log('‚úÖ School found:', school.name);
        return school;
    } catch (error) {
        console.error('‚ùå Error in getBySchoolId:', error);
        if (error instanceof ApiError) throw error;
        throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'L·ªói khi l·∫•y th√¥ng tin tr∆∞·ªùng h·ªçc');
    }
};

// ‚úÖ Th√™m logging trong updateSchoolInfo
const updateSchoolInfo = async (schoolId, data, requestUser) => {
    try {
        console.log('üîç Service updateSchoolInfo - schoolId:', schoolId);
        console.log('üîç Request user:', requestUser);

        const school = await SchoolModel.findOne({ schoolId, _destroy: false });
        if (!school) {
            console.log('‚ùå School not found');
            throw new ApiError(StatusCodes.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y th√¥ng tin tr∆∞·ªùng h·ªçc');
        }

        // ‚úÖ Ki·ªÉm tra quy·ªÅn: Ch·ªâ BGH root m·ªõi ƒë∆∞·ª£c update
        const user = await UserModel.findById(requestUser.id);
        console.log('üîç User check:', {
            exists: !!user,
            role: user?.role,
            isRoot: user?.isRoot,
            userSchoolId: user?.schoolId,
            targetSchoolId: schoolId,
        });

        if (!user || user.role !== 'ban_giam_hieu' || !user.isRoot || user.schoolId !== schoolId) {
            console.log('‚ùå Permission denied');
            throw new ApiError(
                StatusCodes.FORBIDDEN,
                'Ch·ªâ Ban gi√°m hi·ªáu Root m·ªõi c√≥ quy·ªÅn c·∫≠p nh·∫≠t th√¥ng tin tr∆∞·ªùng h·ªçc',
            );
        }

        // ‚úÖ Kh√¥ng cho ph√©p thay ƒë·ªïi status, abbreviation, schoolId
        delete data.status;
        delete data.abbreviation;
        delete data.schoolId;

        console.log('üîç Data to update:', data);

        // Ki·ªÉm tra t√™n tr∆∞·ªùng n·∫øu thay ƒë·ªïi
        if (data.name && data.name !== school.name) {
            const existingName = await SchoolModel.findOne({
                name: data.name,
                _id: { $ne: school._id },
                _destroy: false,
            });

            if (existingName) {
                throw new ApiError(StatusCodes.CONFLICT, 'T√™n tr∆∞·ªùng h·ªçc ƒë√£ t·ªìn t·∫°i');
            }

            // T·∫°o slug m·ªõi
            let baseSlug = slugify(data.name);
            let slug = baseSlug;
            let counter = 1;

            while (await SchoolModel.findOne({ slug, _id: { $ne: school._id }, _destroy: false })) {
                slug = `${baseSlug}-${counter}`;
                counter++;
            }

            data.slug = slug;
        }

        const updatedSchool = await SchoolModel.findByIdAndUpdate(school._id, data, {
            new: true,
            runValidators: true,
        });

        console.log('‚úÖ School updated successfully');
        return updatedSchool;
    } catch (error) {
        console.error('‚ùå Error in updateSchoolInfo:', error);
        if (error instanceof ApiError) throw error;
        throw new ApiError(StatusCodes.INTERNAL_SERVER_ERROR, 'L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin tr∆∞·ªùng h·ªçc');
    }
};

export const schoolServices = {
    createNew,
    getAll,
    getDetails,
    update,
    deleteSchool,
    getBySchoolId, // ‚úÖ Export th√™m
    updateSchoolInfo, // ‚úÖ Export th√™m
};
