import { StatusCodes } from 'http-status-codes';
import { JwtProvider } from '~/providers/JwtProvider';
import dotenv from 'dotenv';
import { UserModel } from '~/models/userModel';
dotenv.config();

// Middleware n√†y s·∫Ω ƒë·∫£m nhi·ªám vi·ªác quan tr·ªçng: L·∫•y v√† x√°c th·ª±c c√°i JWT accessToken nh·∫≠n ƒë∆∞·ª£c t·ª´ ph√≠a FE c√≥ h∆°p l·ªá hay kh√¥ng
const isAuthorized = async (req, res, next) => {
    // C√°ch 2: L·∫•y accessToken trong tr∆∞·ªùng h·ª£p ph√≠a FE l∆∞u localstorage v√† g·ª≠i l√™n th√¥ng qua header authorization
    const accessTokenFromHeader = req.headers.authorization;
    if (!accessTokenFromHeader) {
        res.status(StatusCodes.UNAUTHORIZED).json({ message: 'Unauthorized! (Token not found)' });
        return;
    }
    // console.log('accessTokenFromHeader: ', accessTokenFromHeader);
    // console.log('-----');
    try {
        // B∆∞·ªõc 01: Th·ª±c hi·ªán gi·∫£i m√£ token xem n√≥ c√≥ h·ª£p l·ªá hay l√† kh√¥ng
        const accessTokenDecoded = await JwtProvider.verifyToken(
            accessTokenFromHeader.substring('Bearer '.length), // D√πng token theo c√°ch 02 ·ªü tr√™n
            process.env.ACCESS_TOKEN_SECRET_SIGNATURE,
        );
        // console.log('accessTokenDecoded: ', accessTokenDecoded);

        // üîç ƒê·∫£m b·∫£o l·∫•y th√¥ng tin user m·ªõi nh·∫•t t·ª´ DB
        const dbUser = await UserModel.findById(accessTokenDecoded.id).select('schoolId role isRoot');
        if (!dbUser) {
            return res.status(StatusCodes.UNAUTHORIZED).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a' });
        }

        // ‚úÖ G·ªôp th√¥ng tin token + DB (∆∞u ti√™n DB)
        // B∆∞·ªõc 02: Quan tr·ªçng: N·∫øu nh∆∞ token h·ª£p l·ªá, th√¨ s·∫Ω c·∫ßn ph·∫£i l∆∞u th√¥ng tin gi·∫£i m√£ ƒë∆∞·ª£c
        // v√†o c√°i req.jwtDecoded, ƒë·ªÉ s·ª≠ d·ª•ng cho c√°c t·∫ßng c·∫ßn x·ª≠ l√Ω ·ªü ph√≠a sau
        req.jwtDecoded = {
            ...accessTokenDecoded,
            schoolId: dbUser.schoolId,
            role: dbUser.role,
            isRoot: dbUser.isRoot,
        };

        // B∆∞·ªõc 03: cho ph√©p c·∫£i request ƒëi ti·∫øp
        next();
    } catch (error) {
        //   console.log('Error from authMiddleware: ', error);

        // Tr∆∞·ªùng h·ª£p l·ªói 01: N·∫øu accessToken n√≥ b·ªã h·∫øt h·∫°n (expired) th√¨ m√¨nh c·∫ßn tr·∫£ v·ªÅ m·ªôt c√°i m√£ l·ªói
        // GONE - 410 cho ph√≠a FE bi·∫øt ƒë·ªÉ g·ªçi api refreshToken
        if (error.message?.includes('jwt expired')) {
            res.status(StatusCodes.GONE).json({ message: 'Need to refresh token' });
            return;
        }

        // Tr∆∞·ªùng h·ª£p l·ªói 02: N·∫øu nh∆∞ c√°i accessToken n√≥ kh√¥ng h·ª£p l·ªá do b·∫•t k·ª≥ ƒëi·ªÅu g√¨ kh√°c tr∆∞·ªùng h·ª£p h·∫øt h·∫°n
        // th√¨ ch√∫ng ta c·ª© th·∫≥ng tay tr·∫£ v·ªÅ m√£ 401 cho ph√≠a FE x·ª≠ l√Ω Logout / ho·∫∑c g·ªçi API Logout t√πy tr∆∞·ªùng h·ª£p
        res.status(StatusCodes.UNAUTHORIZED).json({ message: 'Unauthorized! please login.' });
    }
};

export const authMiddleware = { isAuthorized };
